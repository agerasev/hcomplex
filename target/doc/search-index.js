var N=null,E="",T="t",U="u",searchIndex={};
var R=["hcomplex","prelude","hcomplex::construct","sqr_abs","result","hcomplex::transform","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","construct","mul_assign","div_assign","formatter","Construct","Transform"];

searchIndex[R[0]]={"doc":E,"i":[[0,"traits",R[0],E,N,N],[8,"Conj","hcomplex::traits","Something that can be conjugated",N,N],[10,"conj",E,E,0,[[["self"]],["self"]]],[8,"SqrAbs",E,"Square absolute value",N,N],[16,"Output",E,E,1,N],[10,R[3],E,E,1,N],[8,"Algebra",E,"Some algebra over real numbers (e.g. Float, Complex,…",N,N],[0,R[12],R[0],E,N,N],[3,R[16],R[2],"Cayley–Dickson construction, a basic building block",N,N],[12,"0",E,E,2,N],[12,"1",E,E,2,N],[11,"new2",E,"Create from two parts",2,[[["a"],["a"]],["self"]]],[11,"abs",E,E,2,[[["self"]],[T]]],[11,"re",E,E,2,[[["self"]],["a"]]],[11,"im",E,E,2,[[["self"]],["a"]]],[11,"new4",E,"Create from four parts",2,[[["a"],["a"],["a"],["a"]],["self"]]],[11,"w",E,E,2,[[["self"]],["a"]]],[11,"x",E,E,2,[[["self"]],["a"]]],[11,"y",E,E,2,[[["self"]],["a"]]],[11,"z",E,E,2,[[["self"]],["a"]]],[0,"transform",R[0],E,N,N],[3,"Moebius",R[5],E,N,N],[12,"a",E,E,3,N],[12,"b",E,E,3,N],[12,"c",E,E,3,N],[12,"d",E,E,3,N],[0,R[1],E,E,N,N],[8,R[17],E,E,N,N],[10,"apply",E,E,4,[[["self"],["a"]],["a"]]],[8,"Chain",E,E,N,N],[10,"chain",E,E,5,[[["self"],["self"]],["self"]]],[11,"new",E,E,3,[[["a"],["a"],["a"],["a"]],["self"]]],[0,R[1],R[0],E,N,N],[6,"Complex",E,"2-dimensional commutative and associative algebra",N,N],[6,"Quaternion",E,"4-dimensional associative but non-commutative algebra",N,N],[6,"Octonion",E,"8-dimensional non-commutative and non-associative algebra",N,N],[6,"Sedenion",E,"16-dimensional non-commutative and non-associative algebra…",N,N],[11,"conj",R[2],E,2,[[["self"]],[T]]],[11,R[3],E,E,2,[[["self"]],[T]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,N],[11,R[8],E,E,2,[[[U]],[R[4]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,"type_id",E,E,2,[[["self"]],["typeid"]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[4]]]],[11,"from",R[5],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,N],[11,R[8],E,E,3,[[[U]],[R[4]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,"type_id",E,E,3,[[["self"]],["typeid"]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[4]]]],[11,"conj",R[2],E,2,[[["self"]],["self"]]],[11,R[3],E,E,2,[[["self"]],[T]]],[11,"apply",R[5],E,3,[[["self"],["a"]],["a"]]],[11,"chain",E,E,3,[[["self"],["self"]],["self"]]],[11,"eq",R[2],E,2,[[["self"],[R[12]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[12]]],["bool"]]],[11,"clone",E,E,2,[[["self"]],[R[12]]]],[11,"clone",R[5],E,3,[[["self"]],["moebius"]]],[11,"add",R[2],E,2,N],[11,"sub",E,E,2,N],[11,"mul",E,E,2,N],[11,"mul",E,E,2,N],[11,"div",E,E,2,N],[11,"div",E,E,2,N],[11,"rem",E,E,2,N],[11,"neg",E,E,2,[[["self"]],["self"]]],[11,"add_assign",E,E,2,N],[11,"sub_assign",E,E,2,N],[11,R[13],E,E,2,N],[11,R[13],E,E,2,N],[11,R[14],E,E,2,N],[11,R[14],E,E,2,N],[11,"rem_assign",E,E,2,N],[11,"fmt",E,E,2,[[["self"],[R[15]]],[R[4]]]],[11,"fmt",R[5],E,3,[[["self"],[R[15]]],[R[4]]]],[11,"from_str_radix",R[2],E,2,[[["str"],["u32"]],[R[4]]]],[11,"zero",E,E,2,[[],["self"]]],[11,"is_zero",E,E,2,[[["self"]],["bool"]]],[11,"one",E,E,2,[[],["self"]]],[11,"inv",E,E,2,[[["self"]],["self"]]]],"p":[[8,"Conj"],[8,"SqrAbs"],[3,R[16]],[3,"Moebius"],[8,R[17]],[8,"Chain"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);